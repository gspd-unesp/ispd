/* Generated By:JavaCC: Do not edit this line. Interpretador.java */
package ispd.arquivo.interpretador.gerador;

import javax.swing.JOptionPane;

class Interpretador implements InterpretadorConstants {

    public boolean verbose;
    private String textoVerbose = "Saida do Verbose:";
    public boolean erroEncontrado = false;
    private String erros = "Erros encontrados durante o parser do Gerador:";
    //booleanos para controle
    private boolean dinamico = false;
    private boolean tarefaCrescente = true;
    private boolean recursoCrescente = true;
    //dados para costruir classe
    private String arquivoNome;
    private String pacote = "package ispd.policy.externo;\u005cn\u005cn";
    private String imports = "import ispd.policy.escalonador.Escalonador;\u005cn"
            + "import ispd.motor.filas.Tarefa;\u005cn"
            + "import ispd.motor.filas.servidores.CS_Processamento;\u005cn"
            + "import ispd.motor.filas.servidores.CentroServico;\u005cn"
            + "import java.util.List;\u005cn"
            + "import java.util.ArrayList;\u005cn\u005cn";
    private String declaracao;
    private String variavel = "private Tarefa tarefaSelecionada = null;\u005cn";
    private String construtor = "";
    private String caracteristica = "";
    private String decIniciar = "@Override\u005cnpublic void iniciar() {\u005cn";
    private String iniciar = "";
    private String decTarefa = "@Override\u005cn"
            + "public Tarefa escalonarTarefa() {\u005cn";
    private String tarefa = "";
    private String tarefaExpressao = "";
    private String declararVariaveisTarefa = "";
    private String carregarVariaveisTarefa = "";
    private String decRecurso = "@Override\u005cn"
            + "public CS_Processamento escalonarRecurso() {\u005cn";
    private String recurso = "";
    private String recursoExpressao = "";
    private String declararVariaveisRecurso = "";
    private String carregarVariaveisRecurso = "";
    private String decEscalonar = "@Override\u005cn"
            + "public void escalonar() {\u005cn";
    private String escalonar = "    tarefaSelecionada = escalonarTarefa();\u005cn"
            + "    if(tarefaSelecionada != null){\u005cn";
    private String ifEscalonar = "        CentroServico rec = escalonarRecurso();\u005cn"
            + "        tarefaSelecionada.setLocalProcessamento(rec);\u005cn"
            + "        tarefaSelecionada.setCaminho(escalonarRota(rec));\u005cn"
            + "        mestre.sendTask(tarefaSelecionada);\u005cn";
    //private String decResultadoAtualizar = "";
    //private String resultadoAtualizar = "";
    //private String fimResultadoAtualizar = "";
    private String decAddTarefaConcluida = "";
    private String addTarefaConcluida = "";
    private String fimAddTarefaConcluida = "";
    private String adicionarTarefa = "";
    private String getTempoAtualizar = "";
    private String rota = "@Override\u005cn"
            + "public List<CentroServico> escalonarRota(CentroServico destino) {\u005cn"
            + "    int index = escravos.indexOf(destino);\u005cn"
            + "    return new ArrayList<CentroServico>((List<CentroServico>) caminhoEscravo.get(index));\u005cn"
            + "}\u005cn\u005cn";
    private String metodosPrivate = "";

    public void resetaObjetosParser() {
        textoVerbose = "";
        erroEncontrado = false;
    }

    public void printv(String msg) {
        textoVerbose = textoVerbose + "\u005cn>" + msg;
    }

    public void addErro(String msg) {
        erros = erros + "\u005cn" + msg;
    }

    public void resuladoParser() {
        if (erroEncontrado) {
            JOptionPane.showMessageDialog(null, erros, "Found Errors", JOptionPane.ERROR_MESSAGE);
        } else if (verbose) {
            JOptionPane.showMessageDialog(null, textoVerbose, "Saida do Reconhecimento", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void consomeTokens() {
        Token t = getToken(1);
        while (t.kind != SCHEDULER && t.kind != STATIC && t.kind != DYNAMIC && t.kind != TASK && t.kind != RESOURCE && t.kind != EOF) {
            getNextToken();
            t = getToken(1);
        }
    }

    public void escreverNome(String text) {
        arquivoNome = text;
        declaracao = "public class " + text + " extends Escalonador{\u005cn\u005cn";
        construtor = "public " + text + "() {\u005cn"
                + "    this.tarefas = new ArrayList<Tarefa>();\u005cn"
                + "    this.escravos = new ArrayList<CS_Processamento>();\u005cn"
                + "}\u005cn\u005cn";
    }

    public void estatico() {
        caracteristica = "";
        dinamico = false;
    }

    public void dinamico(String tipo) {
        if (tipo.equals("in")) {
            adicionarTarefa = "@Override\u005cn"
                    + "public void adicionarTarefa(Tarefa tarefa){\u005cn"
                    + "    super.adicionarTarefa(tarefa);\u005cn"
                    + "    for(CS_Processamento maq : this.getEscravos()){\u005cn"
                    + "        mestre.updateSubordinate(maq);\u005cn"
                    + "    }\u005cn"
                    + "}\u005cn\u005cn";
        }
        if (tipo.equals("out")) {
            ifEscalonar = "    for(CS_Processamento maq : this.getEscravos()){\u005cn"
                    + "        mestre.updateSubordinate(maq);\u005cn"
                    + "    }\u005cn";
        }
        if (tipo.equals("end")) {
            decAddTarefaConcluida = "@Override\u005cn"
                    + "public void addTarefaConcluida(Tarefa tarefa) {\u005cn"
                    + "    super.addTarefaConcluida(tarefa);\u005cn";
            addTarefaConcluida += "    for(CS_Processamento maq : this.getEscravos()){\u005cn"
                    + "        mestre.updateSubordinate(maq);\u005cn"
                    + "    }\u005cn";
            fimAddTarefaConcluida = "}\u005cn\u005cn";

        }
    }

    public void dinamicoIntervalo(String text) {
        getTempoAtualizar = "@Override\u005cn"
                + "public Double getTempoAtualizar(){\u005cn"
                + "    return (double) " + text + ";\u005cn"
                + "}\u005cn\u005cn";
    }

    public void formulaTarefa(String valor) {
        if ("random".equals(valor)) {
            if (!imports.contains("import java.util.Random;")) {
                imports = "import java.util.Random;\u005cn" + imports;
            }
            if (!variavel.contains("private Random sorteio = new Random();")) {
                variavel += "private Random sorteio = new Random();\u005cn";
            }
            tarefa = "  if (!tarefas.isEmpty()) {\u005cn"
                    + "      int tar = sorteio.nextInt(tarefas.size());\u005cn"
                    + "      return tarefas.remove(tar);\u005cn"
                    + "  }\u005cn"
                    + "  return null;\u005cn";
        } else if ("fifo".equals(valor)) {
            tarefa = "  if (!tarefas.isEmpty()) {\u005cn"
                    + "      return tarefas.remove(0);\u005cn"
                    + "  }\u005cn"
                    + "  return null;\u005cn";
        } else if ("formula".equals(valor)) {
            String ordenac = " < ";
            if (tarefaCrescente) {
                ordenac = " > ";
            }
            tarefa = "if(!tarefas.isEmpty()){\u005cn"
                    + declararVariaveisTarefa
                    + "  double resultado = " + tarefaExpressao + ";\u005cn"
                    + "  int tar = 0;\u005cn"
                    + "  for(int i = 0; i < tarefas.size(); i++){\u005cn"
                    + carregarVariaveisTarefa
                    + "    double expressao = " + tarefaExpressao + ";\u005cn"
                    + "    if(resultado " + ordenac + " expressao){\u005cn"
                    + "       resultado = expressao;\u005cn"
                    + "       tar = i;\u005cn"
                    + "    }\u005cn"
                    + "  }\u005cn"
                    + "return tarefas.remove(tar);\u005cn"
                    + "}\u005cn"
                    + "return null;\u005cn";
        }
    }

    public void formulaRecurso(String valor) {
        if ("random".equals(valor)) {
            if (!imports.contains("import java.util.Random;")) {
                imports = "import java.util.Random;\u005cn" + imports;
            }
            if (!variavel.contains("private Random sorteio = new Random();")) {
                variavel += "Random sorteio = new Random();\u005cn";
            }
            recurso = "  int rec = sorteio.nextInt(escravos.size());\u005cn"
                    + "  return escravos.get(rec);\u005cn";
        } else if ("fifo".equals(valor)) {
            if (!imports.contains("import java.util.ListIterator;")) {
                imports = "import java.util.ListIterator;\u005cn" + imports;
            }
            if (!variavel.contains("private ListIterator<CS_Processamento> recursos;")) {
                variavel += "private ListIterator<CS_Processamento> recursos;\u005cn";
            }
            if (!iniciar.contains("recursos = escravos.listIterator(0);")) {
                iniciar += "    recursos = escravos.listIterator(0);\u005cn";
            }
            recurso = "  if(!escravos.isEmpty()){\u005cn"
                    + "      if (recursos.hasNext()) {\u005cn"
                    + "          return recursos.next();\u005cn"
                    + "      }else{\u005cn"
                    + "          recursos = escravos.listIterator(0);\u005cn"
                    + "          return recursos.next();\u005cn"
                    + "      }\u005cn"
                    + "  }\u005cn"
                    + "  return null;\u005cn";
        } else if ("formula".equals(valor)) {
            String ordenac = " < ";
            if (recursoCrescente) {
                ordenac = " > ";
            }
            recurso = "if(!escravos.isEmpty()){\u005cn"
                    + declararVariaveisRecurso
                    + "  double resultado = " + recursoExpressao + ";\u005cn"
                    + "  int rec = 0;\u005cn"
                    + "  for(int i = 0; i < escravos.size(); i++){\u005cn"
                    + carregarVariaveisRecurso
                    + "    double expressao = " + recursoExpressao + ";\u005cn"
                    + "    if(resultado " + ordenac + " expressao){\u005cn"
                    + "       resultado = expressao;\u005cn"
                    + "       rec = i;\u005cn"
                    + "    }\u005cn"
                    + "  }\u005cn"
                    + "return escravos.get(rec);\u005cn"
                    + "}\u005cn"
                    + "return null;\u005cn";
        }
    }

    public void addConstanteTarefa(String valor) {
        tarefaExpressao += valor;
    }

    public void addConstanteRecurso(String valor) {
        recursoExpressao += valor;
    }

    public void limite(String valorInteiro, boolean porRecurso) {
        if (porRecurso) {
            metodosPrivate += "private boolean condicoesEscalonamento() {\u005cn"
                    + "    int cont = 1;\u005cn"
                    + "    for (List tarefasNoRecurso : tarExecRec) {\u005cn"
                    + "        if (tarefasNoRecurso.size() > 1) {\u005cn"
                    + "            cont++;\u005cn"
                    + "        }\u005cn"
                    + "    }\u005cn"
                    + "    if(cont >= tarExecRec.size()){\u005cn"
                    + "        mestre.setSchedulingConditions(PolicyConditions.WHEN_RECEIVES_RESULT);\u005cn"
                    + "        return false;\u005cn"
                    + "    }\u005cn"
                    + "    mestre.setSchedulingConditions(PolicyConditions.WHILE_MUST_DISTRIBUTE);\u005cn"
                    + "    return true;\u005cn"
                    + "}\u005cn\u005cn";
            if (!variavel.contains("tarExecRec")) {
                variavel += "private List<List> tarExecRec;\u005cn";
            }
            if (!iniciar.contains("tarExecRec")) {
                iniciar += "    tarExecRec = new ArrayList<List>(escravos.size());\u005cn"
                        + "    for (int i = 0; i < escravos.size(); i++) {\u005cn"
                        + "        tarExecRec.add(new ArrayList<Tarefa>());\u005cn"
                        + "    }\u005cn";
            }
            if (!metodosPrivate.contains("private void addTarefasEnviadas(){")) {
                metodosPrivate += "private void addTarefasEnviadas(){\u005cn"
                        + "    if(tarefaSelecionada != null){\u005cn"
                        + "        int index = escravos.indexOf(tarefaSelecionada.getLocalProcessamento());\u005cn"
                        + "        tarExecRec.get(index).add(tarefaSelecionada);\u005cn"
                        + "    }\u005cn"
                        + "}\u005cn\u005cn";
            }
            if (!escalonar.contains("if (condicoesEscalonamento())")) {
                escalonar = "tarefaSelecionada = null;\u005cn"
                        + "if (condicoesEscalonamento())\u005cn"
                        + escalonar;
            }
            if (!ifEscalonar.contains("addTarefasEnviadas();")) {
                ifEscalonar += "addTarefasEnviadas();\u005cn";
            }
            decAddTarefaConcluida = "@Override\u005cn"
                    + "public void addTarefaConcluida(Tarefa tarefa) {\u005cn"
                    + "    super.addTarefaConcluida(tarefa);\u005cn";
            addTarefaConcluida = addTarefaConcluida
                    + "    for (int i = 0; i < escravos.size(); i++) {\u005cn"
                    + "        if (tarExecRec.get(i).contains(tarefa)) {\u005cn"
                    + "            tarExecRec.get(i).remove(tarefa);\u005cn"
                    + "        }\u005cn"
                    + "    }\u005cn";
            fimAddTarefaConcluida = "}\u005cn\u005cn";
        } else {
            metodosPrivate += "private boolean  condicoesEscalonamento() {\u005cn"
                    + "    int cont = 1;\u005cn"
                    + "    for (String usuario : metricaUsuarios.getUsuarios()) {\u005cn"
                    + "        if( (metricaUsuarios.getSizeTarefasSubmetidas(usuario) - metricaUsuarios.getSizeTarefasConcluidas(usuario) ) > " + valorInteiro + "){\u005cn"
                    + "            cont++;\u005cn"
                    + "        }\u005cn"
                    + "    }\u005cn"
                    + "    if(cont >= metricaUsuarios.getUsuarios().size()){\u005cn"
                    + "        mestre.setSchedulingConditions(PolicyConditions.WHEN_RECEIVES_RESULT);\u005cn"
                    + "        return false;\u005cn"
                    + "    }\u005cn"
                    + "    mestre.setSchedulingConditions(PolicyConditions.WHILE_MUST_DISTRIBUTE);\u005cn"
                    + "    return true;\u005cn"
                    + "}\u005cn\u005cn";
        }
    }

    public void addExpressaoTarefa(int tipoToken) {
        switch (tipoToken) {
            case add:
                tarefaExpressao += " + ";
                break;
            case sub:
                tarefaExpressao += " - ";
                break;
            case div:
                tarefaExpressao += " / ";
                break;
            case mult:
                tarefaExpressao += " * ";
                break;
            case lparen:
                tarefaExpressao += " ( ";
                break;
            case rparen:
                tarefaExpressao += " ) ";
                break;
            case tTamComp:
                tarefaExpressao += "tTamComp";
                if (!declararVariaveisTarefa.contains("tTamComp")) {
                    declararVariaveisTarefa += "double tTamComp = tarefas.get(0).getTamProcessamento();\u005cn";
                }
                if (!carregarVariaveisTarefa.contains("tTamComp")) {
                    carregarVariaveisTarefa += "tTamComp = tarefas.get(i).getTamProcessamento();\u005cn";
                }
                break;
            case tTamComu:
                tarefaExpressao += "tTamComu";
                if (!declararVariaveisTarefa.contains("tTamComu")) {
                    declararVariaveisTarefa += "double tTamComu = tarefas.get(0).getTamComunicacao();\u005cn";
                }
                if (!carregarVariaveisTarefa.contains("tTamComu")) {
                    carregarVariaveisTarefa += "tTamComu = tarefas.get(i).getTamComunicacao();\u005cn";
                }
                break;
            case tTempSubm:
                tarefaExpressao += "tTempSubm";
                if (!declararVariaveisTarefa.contains("tTempSubm")) {
                    declararVariaveisTarefa += "double tTempSubm = tarefas.get(0).getTimeCriacao();\u005cn";
                }
                if (!carregarVariaveisTarefa.contains("tTempSubm")) {
                    carregarVariaveisTarefa += "tTempSubm = tarefas.get(i).getTimeCriacao();\u005cn";
                }
                break;
            case tNumTarSub:
                tarefaExpressao += "tNumTarSub";
                if (!declararVariaveisTarefa.contains("tNumTarSub")) {
                    if (dinamico) {
                        declararVariaveisTarefa += "int tNumTarSub = mestre.getSimulation().getRedeDeFilas().getMetricasUsuarios().getSizeTarefasSubmetidas(tarefas.get(0).getProprietario());\u005cn";
                    } else {
                        declararVariaveisTarefa += "int tNumTarSub = metricaUsuarios.getSizeTarefasSubmetidas(tarefas.get(0).getProprietario());\u005cn";
                    }
                }
                if (!carregarVariaveisTarefa.contains("tNumTarSub")) {
                    if (dinamico) {
                        carregarVariaveisTarefa += "tNumTarSub = mestre.getSimulation().getRedeDeFilas().getMetricasUsuarios().getSizeTarefasSubmetidas(tarefas.get(i).getProprietario());\u005cn";
                    } else {
                        carregarVariaveisTarefa += "tNumTarSub = metricaUsuarios.getSizeTarefasSubmetidas(tarefas.get(i).getProprietario());\u005cn";
                    }
                }
                break;
            case tNumTarConc:
                tarefaExpressao += "tNumTarConc";
                if (!declararVariaveisTarefa.contains("tNumTarConc")) {
                    if (dinamico) {
                        declararVariaveisTarefa += "int tNumTarConc = mestre.getSimulation().getRedeDeFilas().getMetricasUsuarios().getSizeTarefasConcluidas(tarefas.get(0).getProprietario());\u005cn";
                    } else {
                        declararVariaveisTarefa += "int tNumTarConc = metricaUsuarios.getSizeTarefasConcluidas(tarefas.get(0).getProprietario());\u005cn";
                    }
                }
                if (!carregarVariaveisTarefa.contains("tNumTarConc")) {
                    if (dinamico) {
                        carregarVariaveisTarefa += "tNumTarConc = mestre.getSimulation().getRedeDeFilas().getMetricasUsuarios().getSizeTarefasConcluidas(tarefas.get(i).getProprietario());\u005cn";
                    } else {
                        carregarVariaveisTarefa += "tNumTarConc = metricaUsuarios.getSizeTarefasConcluidas(tarefas.get(i).getProprietario());\u005cn";
                    }
                }
                break;
            case tPoderUser:
                tarefaExpressao += "tPoderUser";
                if (!declararVariaveisTarefa.contains("tPoderUser")) {
                    declararVariaveisTarefa += "double tPoderUser = metricaUsuarios.getPoderComputacional(tarefas.get(0).getProprietario());\u005cn";
                }
                if (!carregarVariaveisTarefa.contains("tPoderUser")) {
                    carregarVariaveisTarefa += "tPoderUser = metricaUsuarios.getPoderComputacional(tarefas.get(i).getProprietario());\u005cn";
                }
                break;
            default:
                Token t = getToken(1);
                addErro("Erro semantico encontrado na linha " + t.endLine + ", coluna " + t.endColumn);
                erroEncontrado = true;
                consomeTokens();
                resuladoParser();
        }
    }

    public void addExpressaoRecurso(int tipoToken) {
        switch (tipoToken) {
            case add:
                recursoExpressao += " + ";
                break;
            case sub:
                recursoExpressao += " - ";
                break;
            case div:
                recursoExpressao += " / ";
                break;
            case mult:
                recursoExpressao += " * ";
                break;
            case lparen:
                recursoExpressao += " ( ";
                break;
            case rparen:
                recursoExpressao += " ) ";
                break;
            case rPodeProc:
                recursoExpressao += "rPodeProc";
                if (!declararVariaveisRecurso.contains("rPodeProc")) {
                    declararVariaveisRecurso += "double rPodeProc = escravos.get(0).getPoderComputacional();\u005cn";
                }
                if (!carregarVariaveisRecurso.contains("rPodeProc")) {
                    carregarVariaveisRecurso += "rPodeProc = escravos.get(i).getPoderComputacional();\u005cn";
                }
                break;
            case rLinkComu:
                recursoExpressao += "rLinkComu";
                if (!imports.contains("import ispd.motor.filas.servidores.CS_Comunicacao;")) {
                    imports = "import ispd.motor.filas.servidores.CS_Comunicacao;\u005cn" + imports;
                }
                if (!declararVariaveisRecurso.contains("rLinkComu")) {
                    declararVariaveisRecurso += "double rLinkComu = calcularBandaLink(escravos.get(0));\u005cn";
                }
                if (!carregarVariaveisRecurso.contains("rLinkComu")) {
                    carregarVariaveisRecurso += "rLinkComu = calcularBandaLink(escravos.get(i));\u005cn";
                }
                if (!metodosPrivate.contains("private double calcularBandaLink(CS_Processamento get)")) {
                    metodosPrivate += "private double calcularBandaLink(CS_Processamento get) {\u005cn"
                            + "double total = 0;\u005cn"
                            + "int conec = 0;\u005cn"
                            + "for (CentroServico cs : escalonarRota(get)) {\u005cn"
                            + "    if(cs instanceof CS_Comunicacao){\u005cn"
                            + "         CS_Comunicacao comu = (CS_Comunicacao) cs;\u005cn"
                            + "         total += comu.getLarguraBanda();\u005cn"
                            + "         conec++;\u005cn"
                            + "    }\u005cn"
                            + "}\u005cn"
                            + "return total / conec;\u005cn"
                            + "}\u005cn\u005cn";
                }
                break;
            case rtamCompTar:
                recursoExpressao += "rtamCompTar";
                if (!declararVariaveisRecurso.contains("rtamCompTar")) {
                    declararVariaveisRecurso += "double rtamCompTar = tarefaSelecionada.getTamProcessamento();\u005cn";
                }
                break;
            case rtamComuTar:
                recursoExpressao += "rtamComuTar";
                if (!declararVariaveisRecurso.contains("rtamComuTar")) {
                    declararVariaveisRecurso += "double rtamComuTar = tarefaSelecionada.getTamComunicacao();\u005cn";
                }
                break;
            case numTarExec:
                recursoExpressao += "numTarExec";
                if (!variavel.contains("numTarExecRec")) {
                    variavel += "private List<Integer> numTarExecRec;\u005cn";
                }
                if (!variavel.contains("tarExecRec")) {
                    variavel += "private List<List> tarExecRec;\u005cn";
                }
                if (!metodosPrivate.contains("private void addTarefasEnviadasNum(){")) {
                    metodosPrivate += "private void addTarefasEnviadasNum(){\u005cn"
                            + "    if(tarefaSelecionada != null){\u005cn"
                            + "        int index = escravos.indexOf(tarefaSelecionada.getLocalProcessamento());\u005cn"
                            + "        numTarExecRec.set(index,numTarExecRec.get(index)+1);\u005cn"
                            + "    }\u005cn"
                            + "}\u005cn\u005cn";
                }
                if (!metodosPrivate.contains("private void addTarefasEnviadas(){")) {
                    metodosPrivate += "private void addTarefasEnviadas(){\u005cn"
                            + "    if(tarefaSelecionada != null){\u005cn"
                            + "        int index = escravos.indexOf(tarefaSelecionada.getLocalProcessamento());\u005cn"
                            + "        tarExecRec.get(index).add(tarefaSelecionada);\u005cn"
                            + "    }\u005cn"
                            + "}\u005cn\u005cn";
                }
                if (!ifEscalonar.contains("addTarefasEnviadasNum();")) {
                    ifEscalonar += "addTarefasEnviadasNum();\u005cn";
                }
                if (!ifEscalonar.contains("addTarefasEnviadas();")) {
                    ifEscalonar += "addTarefasEnviadas();\u005cn";
                }
                if (!imports.contains("import java.util.ArrayList;")) {
                    imports = "import java.util.ArrayList;\u005cn" + imports;
                }
                if (!iniciar.contains("numTarExecRec")) {
                    iniciar += "    numTarExecRec = new ArrayList<Integer>(escravos.size());\u005cn"
                            + "    for (int i = 0; i < escravos.size(); i++) {\u005cn"
                            + "        numTarExecRec.add(0);\u005cn"
                            + "    }\u005cn";
                }
                if (!iniciar.contains("tarExecRec")) {
                    iniciar += "    tarExecRec = new ArrayList<List>(escravos.size());\u005cn"
                            + "    for (int i = 0; i < escravos.size(); i++) {\u005cn"
                            + "        tarExecRec.add(new ArrayList<Tarefa>());\u005cn"
                            + "    }\u005cn";
                }
                if (!addTarefaConcluida.contains("numTarExecRec")) {
                    decAddTarefaConcluida = "@Override\u005cn"
                            + "public void addTarefaConcluida(Tarefa tarefa) {\u005cn"
                            + "    super.addTarefaConcluida(tarefa);\u005cn";
                    addTarefaConcluida = "    int index = escravos.indexOf(tarefa.getLocalProcessamento());\u005cn"
                            + "    if(index != -1){\u005cn"
                            + "        numTarExecRec.set(index, numTarExecRec.get(index) - 1);\u005cn"
                            + "    } else {\u005cn"
                            + "        for(int i = 0; i < escravos.size(); i++){\u005cn"
                            + "            if (tarExecRec.get(i).contains(tarefa)) {\u005cn"
                            + "                numTarExecRec.set(i, numTarExecRec.get(i) - 1);\u005cn"
                            + "                tarExecRec.get(i).remove(tarefa);\u005cn"
                            + "            }\u005cn"
                            + "        }\u005cn"
                            + "    }\u005cn" + addTarefaConcluida;
                    fimAddTarefaConcluida = "}\u005cn\u005cn";
                }
                if (!declararVariaveisRecurso.contains("numTarExec")) {
                    if (dinamico) {
                        declararVariaveisRecurso += "int numTarExec = numTarExecRec.get(0) + escravos.get(0).getInformacaoDinamicaFila().size();\u005cn";
                    } else {
                        declararVariaveisRecurso += "int numTarExec = numTarExecRec.get(0);\u005cn";
                    }
                }
                if (!carregarVariaveisRecurso.contains("numTarExec")) {
                    if (dinamico) {
                        carregarVariaveisRecurso += "numTarExec = numTarExecRec.get(i) + escravos.get(i).getInformacaoDinamicaFila().size();\u005cn";
                    } else {
                        carregarVariaveisRecurso += "numTarExec = numTarExecRec.get(i);\u005cn";
                    }
                }
                break;
            case mflopProce:
                recursoExpressao += "mflopProce";
                if (!variavel.contains("mflopProceRec")) {
                    variavel += "private List<Double> mflopProceRec;\u005cn";
                }
                if (!variavel.contains("tarExecRec")) {
                    variavel += "private List<List> tarExecRec;\u005cn";
                }
                if (!ifEscalonar.contains("addTarefasEnviadasMflop();")) {
                    ifEscalonar += "addTarefasEnviadasMflop();\u005cn";
                }
                if (!ifEscalonar.contains("addTarefasEnviadas();")) {
                    ifEscalonar += "addTarefasEnviadas();\u005cn";
                }
                if (!iniciar.contains("mflopProceRec")) {
                    iniciar += "    mflopProceRec = new ArrayList<Double>(escravos.size());\u005cn"
                            + "    for (int i = 0; i < escravos.size(); i++) {\u005cn"
                            + "        mflopProceRec.add(0.0);\u005cn"
                            + "    }\u005cn";
                }
                if (!iniciar.contains("tarExecRec")) {
                    iniciar += "    tarExecRec = new ArrayList<List>(escravos.size());\u005cn"
                            + "    for (int i = 0; i < escravos.size(); i++) {\u005cn"
                            + "        tarExecRec.add(new ArrayList<Tarefa>());\u005cn"
                            + "    }\u005cn";
                }
                if (!metodosPrivate.contains("private void addTarefasEnviadasMflop(){")) {
                    metodosPrivate += "private void addTarefasEnviadasMflop(){\u005cn"
                            + "    if(tarefaSelecionada != null){\u005cn"
                            + "        int index = escravos.indexOf(tarefaSelecionada.getLocalProcessamento());\u005cn"
                            + "        mflopProceRec.set(index,mflopProceRec.get(index)+tarefaSelecionada.getTamProcessamento());\u005cn"
                            + "    }\u005cn"
                            + "}\u005cn\u005cn";
                }
                if (!metodosPrivate.contains("private void addTarefasEnviadas(){")) {
                    metodosPrivate += "private void addTarefasEnviadas(){\u005cn"
                            + "    if(tarefaSelecionada != null){\u005cn"
                            + "        int index = escravos.indexOf(tarefaSelecionada.getLocalProcessamento());\u005cn"
                            + "        tarExecRec.get(index).add(tarefaSelecionada);\u005cn"
                            + "    }\u005cn"
                            + "}\u005cn\u005cn";
                }
                if (!addTarefaConcluida.contains("mflopProceRec")) {
                    decAddTarefaConcluida = "@Override\u005cn"
                            + "public void addTarefaConcluida(Tarefa tarefa) {\u005cn"
                            + "    super.addTarefaConcluida(tarefa);\u005cn";
                    addTarefaConcluida = "    int index2 = escravos.indexOf(tarefa.getLocalProcessamento());\u005cn"
                            + "    if(index2 != -1){\u005cn"
                            + "        mflopProceRec.set(index2, mflopProceRec.get(index2) - tarefa.getTamProcessamento());\u005cn"
                            + "    } else {\u005cn"
                            + "        for(int i = 0; i < escravos.size(); i++){\u005cn"
                            + "            if (tarExecRec.get(i).contains(tarefa)) {\u005cn"
                            + "                mflopProceRec.set(i, mflopProceRec.get(i) - tarefa.getTamProcessamento());\u005cn"
                            + "            }\u005cn"
                            + "        }\u005cn"
                            + "    }\u005cn" + addTarefaConcluida;
                    fimAddTarefaConcluida = "}\u005cn\u005cn";
                }
                if (dinamico && !metodosPrivate.contains("private Double mflopsNoRecIndex(int index)")) {
                    metodosPrivate += "private double mflopsNoRecIndex(int index) {\u005cn"
                            + "    double mflops = 0;\u005cn"
                            + "    for(Object tar : escravos.get(index).getInformacaoDinamicaFila()){\u005cn"
                            + "        Tarefa tarefa = (Tarefa) tar;\u005cn"
                            + "        mflops += tarefa.getTamProcessamento();\u005cn"
                            + "    }\u005cn"
                            + "    return mflops;\u005cn"
                            + "}\u005cn\u005cn";
                }
                if (!declararVariaveisRecurso.contains("mflopProce")) {
                    if (dinamico) {
                        declararVariaveisRecurso += "double mflopProce = mflopProceRec.get(0) + mflopsNoRecIndex(0);\u005cn";
                    } else {
                        declararVariaveisRecurso += "double mflopProce = mflopProceRec.get(0);\u005cn";
                    }
                }
                if (!carregarVariaveisRecurso.contains("mflopProce")) {
                    if (dinamico) {
                        carregarVariaveisRecurso += "mflopProce = mflopProceRec.get(i) + mflopsNoRecIndex(i);\u005cn";
                    } else {
                        carregarVariaveisRecurso += "mflopProce = mflopProceRec.get(i);\u005cn";
                    }
                }
                break;
            default:
                Token t = getToken(1);
                addErro("Erro semantico encontrado na linha " + t.endLine + ", coluna " + t.endColumn);
                erroEncontrado = true;
                consomeTokens();
                resuladoParser();
        }
    }

    public String getCodigo() {
        if (!"".equals(recursoExpressao)) {
            formulaRecurso("formula");
        }
        if (!"".equals(tarefaExpressao)) {
            formulaTarefa("formula");
        }
        String txt = pacote
                + imports
                + declaracao
                + variavel + "\u005cn"
                + construtor
                + caracteristica
                + decIniciar
                + iniciar + "}\u005cn\u005cn"
                + decTarefa
                + tarefa + "}\u005cn\u005cn"
                + decRecurso
                + recurso + "}\u005cn\u005cn"
                + decEscalonar
                + escalonar
                + ifEscalonar + "    }\u005cn}\u005cn\u005cn"
                //+ decResultadoAtualizar
                //+ resultadoAtualizar
                //+ fimResultadoAtualizar
                + decAddTarefaConcluida
                + addTarefaConcluida
                + fimAddTarefaConcluida
                + adicionarTarefa
                + getTempoAtualizar
                + metodosPrivate
                + rota + "}";
        return txt;
    }

    public void setTarefaCrescente(boolean valor) {
        tarefaCrescente = valor;
    }

    public void setRecursoCrescente(boolean valor) {
        recursoCrescente = valor;
    }

    public String getArquivoNome() {
        return arquivoNome;
    }

    final public void Escalonador() throws ParseException {
        resetaObjetosParser();
        try {
            Partes();
            jj_consume_token(0);
            printv("Escalonador reconhecido");

            resuladoParser();
        } catch (ParseException e) {
            Token t = getToken(1);
            addErro("Erro semantico encontrado na linha " + t.endLine + ", coluna " + t.endColumn);
            erroEncontrado = true;
            consomeTokens();
            resuladoParser();
        }
    }

    final public void Partes() throws ParseException {
        label_1:
        while (true) {
            Parte();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case SCHEDULER:
                    ;
                    break;
                default:
                    jj_la1[0] = jj_gen;
                    break label_1;
            }
        }
        printv("Componentes reconhecidos");
    }

    final public void Parte() throws ParseException {
        Nome();
        printv("Reconheceu nome do escaonador");
        Caracteristica();
        printv("Reconheceu caracteristicas");
        EscalonadorTarefa();
        printv("Reconheceu politica de escalonamento das tarefas");
        EscalonadorRecurso();
        printv("Reconheceu politica de escalonamento dos recursos");
    }

    final public void Nome() throws ParseException {
        Token t;
        jj_consume_token(SCHEDULER);
        t = jj_consume_token(nome);
        escreverNome(t.image);
        printv("Reconheceu nome no escravo");
    }

    final public void Caracteristica() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case RESTRICT:
                limite_tarefas();
                break;
            default:
                jj_la1[1] = jj_gen;
                ;
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case STATIC:
                jj_consume_token(STATIC);
                estatico();
                break;
            case DYNAMIC:
                jj_consume_token(DYNAMIC);
                tipo_atualizacao();
                break;
            default:
                jj_la1[2] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void limite_tarefas() throws ParseException {
        Token t;
        jj_consume_token(RESTRICT);
        t = jj_consume_token(inteiro);
        jj_consume_token(TASKPER);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case RESOURCE:
                jj_consume_token(RESOURCE);
                limite(t.image, true);
                break;
            case USER:
                jj_consume_token(USER);
                limite(t.image, false);
                break;
            default:
                jj_la1[3] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void tipo_atualizacao() throws ParseException {
        Token t;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case TASK:
                jj_consume_token(TASK);
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case ENTRY:
                        jj_consume_token(ENTRY);
                        dinamico("in");
                        break;
                    case DISPACTH:
                        jj_consume_token(DISPACTH);
                        dinamico("out");
                        break;
                    case COMPLETED:
                        jj_consume_token(COMPLETED);
                        dinamico("end");
                        break;
                    default:
                        jj_la1[4] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            case TIME:
                jj_consume_token(TIME);
                jj_consume_token(INTERVAL);
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case real:
                        t = jj_consume_token(real);
                        break;
                    case inteiro:
                        t = jj_consume_token(inteiro);
                        break;
                    default:
                        jj_la1[5] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                dinamicoIntervalo(t.image);
                break;
            default:
                jj_la1[6] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void EscalonadorTarefa() throws ParseException {
        jj_consume_token(TASK);
        jj_consume_token(SCHEDULER);
        jj_consume_token(51);
        formula(true);
    }

    final public void EscalonadorRecurso() throws ParseException {
        jj_consume_token(RESOURCE);
        jj_consume_token(SCHEDULER);
        jj_consume_token(51);
        formula(false);
    }

    final public void formula(boolean tarefa) throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case RANDOM:
                jj_consume_token(RANDOM);
                if (tarefa) {
                    formulaTarefa("random");
                } else {
                    formulaRecurso("random");
                }
                break;
            case FIFO:
                jj_consume_token(FIFO);
                if (tarefa) {
                    formulaTarefa("fifo");
                } else {
                    formulaRecurso("fifo");
                }
                break;
            case CRESCENT:
                jj_consume_token(CRESCENT);
                if (tarefa) {
                    setTarefaCrescente(true);
                } else {
                    setRecursoCrescente(true);
                }
                jj_consume_token(lparen);
                expressao(tarefa);
                jj_consume_token(rparen);
                break;
            case DECREASING:
                jj_consume_token(DECREASING);
                if (tarefa) {
                    setTarefaCrescente(false);
                } else {
                    setRecursoCrescente(false);
                }
                jj_consume_token(lparen);
                expressao(tarefa);
                jj_consume_token(rparen);
                break;
            default:
                jj_la1[7] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void expressao(boolean tarefa) throws ParseException {
        operando(tarefa);
        label_2:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case mult:
                case div:
                case sub:
                case add:
                    ;
                    break;
                default:
                    jj_la1[8] = jj_gen;
                    break label_2;
            }
            operador(tarefa);
            operando(tarefa);
        }
    }

    /*void expressao(boolean tarefa):
     {
     }
     {
     expressao2(tarefa) ( 
     ( <add> { if(tarefa)
     addExpressaoTarefa(add);
     else
     addExpressaoRecurso(add); } | 
     <sub> { if(tarefa)
     addExpressaoTarefa(sub);
     else
     addExpressaoRecurso(sub); })
     expressao2(tarefa) )*
     }

     void expressao2(boolean tarefa):
     {
     }
     {
     expressao3(tarefa) ( 
     ( <div> { if(tarefa)
     addExpressaoTarefa(div);
     else
     addExpressaoRecurso(div); } |
     <mult> { if(tarefa)
     addExpressaoTarefa(mult);
     else
     addExpressaoRecurso(mult); } )
     expressao3(tarefa) )*
     }

     void expressao3(boolean tarefa):
     {
     }
     {
     [ <add> { if(tarefa)
     addExpressaoTarefa(add);
     else
     addExpressaoRecurso(add); } |
     <sub> { if(tarefa)
     addExpressaoTarefa(sub);
     else
     addExpressaoRecurso(sub); } ]
     expressao4(tarefa)
     }

     void expressao4(boolean tarefa):
     {
     }
     {
     variavel(tarefa)  |
     constante(tarefa) |
     <lparen> { if(tarefa)
     addExpressaoTarefa(lparen);
     else
     addExpressaoRecurso(lparen); }
     expressao(tarefa)
     <rparen> { if(tarefa)
     addExpressaoTarefa(rparen);
     else
     addExpressaoRecurso(rparen); }
     }*/
    final public void operando(boolean tarefa) throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case sub:
            case add:
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case add:
                        jj_consume_token(add);
                        if (tarefa) {
                            addExpressaoTarefa(add);
                        } else {
                            addExpressaoRecurso(add);
                        }
                        break;
                    case sub:
                        jj_consume_token(sub);
                        if (tarefa) {
                            addExpressaoTarefa(sub);
                        } else {
                            addExpressaoRecurso(sub);
                        }
                        break;
                    default:
                        jj_la1[9] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[10] = jj_gen;
                ;
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case tTamComp:
            case tTamComu:
            case tNumTarSub:
            case tNumTarConc:
            case tPoderUser:
            case tTempSubm:
            case rPodeProc:
            case rLinkComu:
            case rtamCompTar:
            case rtamComuTar:
            case numTarExec:
            case mflopProce:
                variavel(tarefa);
                break;
            case 52:
                constante(tarefa);
                break;
            case lparen:
                jj_consume_token(lparen);
                if (tarefa) {
                    addExpressaoTarefa(lparen);
                } else {
                    addExpressaoRecurso(lparen);
                }
                expressao(tarefa);
                jj_consume_token(rparen);
                if (tarefa) {
                    addExpressaoTarefa(rparen);
                } else {
                    addExpressaoRecurso(rparen);
                }
                break;
            default:
                jj_la1[11] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void operador(boolean tarefa) throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case div:
                jj_consume_token(div);
                if (tarefa) {
                    addExpressaoTarefa(div);
                } else {
                    addExpressaoRecurso(div);
                }
                break;
            case mult:
                jj_consume_token(mult);
                if (tarefa) {
                    addExpressaoTarefa(mult);
                } else {
                    addExpressaoRecurso(mult);
                }
                break;
            case add:
                jj_consume_token(add);
                if (tarefa) {
                    addExpressaoTarefa(add);
                } else {
                    addExpressaoRecurso(add);
                }
                break;
            case sub:
                jj_consume_token(sub);
                if (tarefa) {
                    addExpressaoTarefa(sub);
                } else {
                    addExpressaoRecurso(sub);
                }
                break;
            default:
                jj_la1[12] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void variavel(boolean tarefa) throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case tTamComp:
                jj_consume_token(tTamComp);
                if (tarefa) {
                    addExpressaoTarefa(tTamComp);
                } else {
                    addExpressaoRecurso(tTamComp);
                }
                break;
            case tTamComu:
                jj_consume_token(tTamComu);
                if (tarefa) {
                    addExpressaoTarefa(tTamComu);
                } else {
                    addExpressaoRecurso(tTamComu);
                }
                break;
            case tNumTarSub:
                jj_consume_token(tNumTarSub);
                if (tarefa) {
                    addExpressaoTarefa(tNumTarSub);
                } else {
                    addExpressaoRecurso(tNumTarSub);
                }
                break;
            case tNumTarConc:
                jj_consume_token(tNumTarConc);
                if (tarefa) {
                    addExpressaoTarefa(tNumTarConc);
                } else {
                    addExpressaoRecurso(tNumTarConc);
                }
                break;
            case tPoderUser:
                jj_consume_token(tPoderUser);
                if (tarefa) {
                    addExpressaoTarefa(tPoderUser);
                } else {
                    addExpressaoRecurso(tPoderUser);
                }
                break;
            case tTempSubm:
                jj_consume_token(tTempSubm);
                if (tarefa) {
                    addExpressaoTarefa(tTempSubm);
                } else {
                    addExpressaoRecurso(tTempSubm);
                }
                break;
            case rPodeProc:
                jj_consume_token(rPodeProc);
                if (tarefa) {
                    addExpressaoTarefa(rPodeProc);
                } else {
                    addExpressaoRecurso(rPodeProc);
                }
                break;
            case rLinkComu:
                jj_consume_token(rLinkComu);
                if (tarefa) {
                    addExpressaoTarefa(rLinkComu);
                } else {
                    addExpressaoRecurso(rLinkComu);
                }
                break;
            case rtamCompTar:
                jj_consume_token(rtamCompTar);
                if (tarefa) {
                    addExpressaoTarefa(rtamCompTar);
                } else {
                    addExpressaoRecurso(rtamCompTar);
                }
                break;
            case rtamComuTar:
                jj_consume_token(rtamComuTar);
                if (tarefa) {
                    addExpressaoTarefa(rtamComuTar);
                } else {
                    addExpressaoRecurso(rtamComuTar);
                }
                break;
            case numTarExec:
                jj_consume_token(numTarExec);
                if (tarefa) {
                    addExpressaoTarefa(numTarExec);
                } else {
                    addExpressaoRecurso(numTarExec);
                }
                break;
            case mflopProce:
                jj_consume_token(mflopProce);
                if (tarefa) {
                    addExpressaoTarefa(mflopProce);
                } else {
                    addExpressaoRecurso(mflopProce);
                }
                break;
            default:
                jj_la1[13] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void constante(boolean tarefa) throws ParseException {
        Token t;
        jj_consume_token(52);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case inteiro:
                t = jj_consume_token(inteiro);
                if (tarefa) {
                    addConstanteTarefa(t.image);
                } else {
                    addConstanteRecurso(t.image);
                }
                break;
            case real:
                t = jj_consume_token(real);
                if (tarefa) {
                    addConstanteTarefa(t.image);
                } else {
                    addConstanteRecurso(t.image);
                }
                break;
            default:
                jj_la1[14] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        jj_consume_token(53);
    }
    /**
     * Generated Token Manager.
     */
    public InterpretadorTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    private int jj_ntk;
    private int jj_gen;
    final private int[] jj_la1 = new int[15];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x2, 0x8000, 0xc, 0x24000, 0xe0, 0x0, 0x110, 0x3c00, 0xc0000000, 0x0, 0x0, 0x3ffc0000, 0xc0000000, 0x3ffc0000, 0x0,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x0, 0x0, 0x3, 0x3, 0x3, 0x100004, 0x3, 0x0, 0x30,};
    }

    /**
     * Constructor with InputStream.
     */
    public Interpretador(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public Interpretador(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new InterpretadorTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 15; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 15; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Constructor.
     */
    public Interpretador(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new InterpretadorTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 15; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 15; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Constructor with generated Token Manager.
     */
    public Interpretador(InterpretadorTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 15; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(InterpretadorTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 15; i++) {
            jj_la1[i] = -1;
        }
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    /**
     * Get the next Token.
     */
    final public Token getNextToken() {
        if (token.next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) {
                t = t.next;
            } else {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    private int jj_ntk() {
        if ((jj_nt = token.next) == null) {
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        } else {
            return (jj_ntk = jj_nt.kind);
        }
    }
    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[54];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 15; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 54; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
    }
}

